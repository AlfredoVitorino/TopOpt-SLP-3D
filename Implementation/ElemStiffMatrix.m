function [k] = ElemStiffMatrix(str)
% ElemStiffMatrix constructs the finite element stiffness matrix for linear elements analytically. %
% INPUT: str - structure with the problem data. 
% OUTPUT: k - finite element stiffness matrix. 
% ---------- % 

a = str.el/2; % half of element length
b = str.eh/2; % half of element height
c = str.ew/2; % half of element width
E = 1.0; % Using a unit Young's modulus (since we work with emin)
v = str.nu; % Poisson's ratio

alpha1 = a^2*b^2*(-1 + v); 
alpha2 = a^2*c^2*(-1 + v); 
alpha3 = b^2*c^2*(-1 + v); 
beta1 = a^2*b^2*(1 - 2*v); 
beta2 = a^2*c^2*(1 - 2*v); 
beta3 = b^2*c^2*(1 - 2*v);
gamma = 9*a*b*c;
delta = E/((1+v)*(1-2*v)); 

k = zeros(24,24);

k(1,1) = delta*(-2*alpha3 + beta1 + beta2)/gamma; 
k(1,2) = delta*c/12; 
k(1,3) = delta*b/12; 
k(1,4) = delta*(4*alpha3 + beta1 + beta2)/(2*gamma); 
k(1,5) = delta*(4*c*v - c)/12;
k(1,6) = delta*(4*b*v - b)/12; 
k(1,7) = delta*(4*alpha3 + beta1 - 2*beta2)/(4*gamma); 
k(1,8) = -k(1,2);
k(1,9) = k(1,6)/2; 
k(1,10) = delta*(-2*alpha3 + beta1 - 2*beta2)/(2*gamma);
k(1,11) = -k(1,5);
k(1,12) = k(1,3)/2;
k(1,13) = delta*(-2*alpha3 - 2*beta1 + beta2)/(2*gamma);
k(1,14) = k(1,2)/2;
k(1,15) = -k(1,6);
k(1,16) = delta*(4*alpha3 - 2*beta1 + beta2)/(4*gamma);
k(1,17) = k(1,5)/2;
k(1,18) = -k(1,3);
k(1,19) = -k(1,1)/4; 
k(1,20) = -k(1,14);
k(1,21) = -k(1,12);
k(1,22) = delta*(-alpha3 - beta1 - beta2)/(2*gamma);
k(1,23) = -k(1,17);
k(1,24) = -k(1,9);
k(2,2) = delta*(beta1 - 2*alpha2 + beta3)/gamma; 
k(2,3) = delta*a/12; 
k(2,4) = k(1,11);
k(2,5) = delta*(beta1 - 2*alpha2 - 2*beta3)/(2*gamma);
k(2,6) = k(2,3)/2;
k(2,7) = k(1,8);
k(2,8) = delta*(beta1 + 4*alpha2 - 2*beta3)/(4*gamma);
k(2,9) = delta*(4*a*v - a)/24; 
k(2,10) = k(1,5);
k(2,11) = delta*(beta1 + 4*alpha2 + beta3)/(2*gamma);
k(2,12) = 2*k(2,9);
k(2,13) = k(1,14);
k(2,14) = delta*(beta3 - 2*alpha2 - 2*beta1)/(2*gamma);
k(2,15) = -k(2,12);
k(2,16) = k(1,23);
k(2,17) = delta*(-beta3 - alpha2 - beta1)/(2*gamma);
k(2,18) = -k(2,9);
k(2,19) = k(1,20);
k(2,20) = -k(2,2)/4;
k(2,21) = -k(2,6);
k(2,22) = k(1,17);
k(2,23) = delta*(beta3 + 4*alpha2 - 2*beta1)/(4*gamma);
k(2,24) = -k(2,3);
k(3,3) = delta*(beta2 - 2*alpha1 + beta3)/gamma; 
k(3,4) = k(1,15);
k(3,5) = k(2,6);
k(3,6) = delta*(beta2 - 2*alpha1 - 2*beta3)/(2*gamma);
k(3,7) = k(1,24);
k(3,8) = k(2,18);
k(3,9) = delta*(-beta2 - alpha1 - beta3)/(2*gamma);
k(3,10) = k(1,12);
k(3,11) = k(2,15);
k(3,12) = delta*(-2*beta2 - 2*alpha1 + beta3)/(2*gamma);
k(3,13) = k(1,6);
k(3,14) = k(2,12);
k(3,15) = delta*(beta2 + 4*alpha1 + beta3)/(2*gamma);
k(3,16) = k(1,18);
k(3,17) = k(2,9);
k(3,18) = delta*(beta2 + 4*alpha1 - 2*beta3)/(4*gamma);
k(3,19) = k(1,21);
k(3,20) = k(2,21);
k(3,21) = -k(3,3)/4;
k(3,22) = k(1,9);
k(3,23) = k(2,24);
k(3,24) = delta*(-2*beta2 + 4*alpha1 + beta3)/(4*gamma);
k(4,4) = k(1,1);
k(4,5) = k(1,8);
k(4,6) = k(1,18);
k(4,7) = k(1,10);
k(4,8) = k(1,5);
k(4,9) = k(1,21);
k(4,10) = k(1,7);
k(4,11) = k(1,2);
k(4,12) = k(1,24);
k(4,13) = k(1,16);
k(4,14) = k(1,23);
k(4,15) = k(1,3);
k(4,16) = k(1,13);
k(4,17) = k(1,20);
k(4,18) = k(1,6);
k(4,19) = k(1,22);
k(4,20) = k(1,17);
k(4,21) = k(1,9);
k(4,22) = k(1,19);
k(4,23) = k(1,14);
k(4,24) = k(1,12);
k(5,5) = k(2,2);
k(5,6) = k(2,3);
k(5,7) = k(2,4);
k(5,8) = k(2,11);
k(5,9) = k(2,12);
k(5,10) = k(1,2);
k(5,11) = k(2,8);
k(5,12) = k(2,9);
k(5,13) = k(2,22);
k(5,14) = k(2,17);
k(5,15) = k(2,18);
k(5,16) = k(2,19);
k(5,17) = k(2,14);
k(5,18) = k(2,15);
k(5,19) = k(2,16);
k(5,20) = k(2,23);
k(5,21) = k(2,24);
k(5,22) = k(2,13);
k(5,23) = k(2,20);
k(5,24) = k(2,21);
k(6,6) = k(3,3);
k(6,7) = k(3,19);
k(6,8) = k(3,11);
k(6,9) = k(3,12);
k(6,10) = k(3,22);
k(6,11) = k(3,8);
k(6,12) = k(3,9);
k(6,13) = k(1,3);
k(6,14) = k(3,17);
k(6,15) = k(3,18);
k(6,16) = k(3,4);
k(6,17) = k(3,14);
k(6,18) = k(3,15);
k(6,19) = k(3,7);
k(6,20) = k(3,23);
k(6,21) = k(3,24);
k(6,22) = k(3,10);
k(6,23) = k(3,20);
k(6,24) = k(3,21);
k(7,7) = k(1,1);
k(7,8) = k(1,2);
k(7,9) = k(1,18);
k(7,10) = k(1,4);
k(7,11) = k(1,5);
k(7,12) = k(1,15);
k(7,13) = k(1,19);
k(7,14) = k(1,20);
k(7,15) = k(1,12);
k(7,16) = k(1,22);
k(7,17) = k(1,23);
k(7,18) = k(1,9);
k(7,19) = k(1,13);
k(7,20) = k(1,14);
k(7,21) = k(1,6);
k(7,22) = k(1,16);
k(7,23) = k(1,17);
k(7,24) = k(1,3);
k(8,8) = k(2,2);
k(8,9) = k(2,24);
k(8,10) = k(2,4);
k(8,11) = k(2,5);
k(8,12) = k(2,21);
k(8,13) = k(2,19);
k(8,14) = k(2,20);
k(8,15) = k(2,6);
k(8,16) = k(2,22);
k(8,17) = k(2,23);
k(8,18) = k(2,3);
k(8,19) = k(2,13);
k(8,20) = k(2,14);
k(8,21) = k(2,12);
k(8,22) = k(2,16);
k(8,23) = k(2,17);
k(8,24) = k(2,9);
k(9,9) = k(3,3);
k(9,10) = k(3,13);
k(9,11) = k(3,20);
k(9,12) = k(3,6);
k(9,13) = k(3,10);
k(9,14) = k(3,5);
k(9,15) = k(3,21);
k(9,16) = k(3,7);
k(9,17) = k(2,3);
k(9,18) = k(3,24);
k(9,19) = k(3,4);
k(9,20) = k(3,11);
k(9,21) = k(3,15);
k(9,22) = k(1,3);
k(9,23) = k(3,8);
k(9,24) = k(3,18);
k(10,10) = k(1,1);
k(10,11) = k(1,8);
k(10,12) = k(1,3);
k(10,13) = k(1,22);
k(10,14) = k(1,17);
k(10,15) = k(1,24);
k(10,16) = k(1,19);
k(10,17) = k(1,14);
k(10,18) = k(1,21);
k(10,19) = k(1,16);
k(10,20) = k(1,23);
k(10,21) = k(1,18);
k(10,22) = k(1,13);
k(10,23) = k(1,20);
k(10,24) = k(1,15);
k(11,11) = k(2,2);
k(11,12) = k(2,24);
k(11,13) = k(2,16);
k(11,14) = k(2,23);
k(11,15) = k(2,3);
k(11,16) = k(2,13);
k(11,17) = k(2,20);
k(11,18) = k(2,6);
k(11,19) = k(2,22);
k(11,20) = k(2,17);
k(11,21) = k(2,9);
k(11,22) = k(2,19);
k(11,23) = k(2,14);
k(11,24) = k(2,12);
k(12,12) = k(3,3);
k(12,13) = k(3,22);
k(12,14) = k(2,3);
k(12,15) = k(3,24);
k(12,16) = k(3,19);
k(12,17) = k(3,5);
k(12,18) = k(3,21);
k(12,19) = k(3,16);
k(12,20) = k(3,8);
k(12,21) = k(3,18);
k(12,22) = k(3,13);
k(12,23) = k(3,11);
k(12,24) = k(3,15);
k(13,13) = k(1,1);
k(13,14) = k(1,2);
k(13,15) = k(1,18);
k(13,16) = k(1,4);
k(13,17) = k(1,5);
k(13,18) = k(1,15);
k(13,19) = k(1,7);
k(13,20) = k(1,8);
k(13,21) = k(1,24);
k(13,22) = k(1,10);
k(13,23) = k(1,11);
k(13,24) = k(1,21);
k(14,14) = k(2,2);
k(14,15) = k(2,24);
k(14,16) = k(2,4);
k(14,17) = k(2,5);
k(14,18) = k(2,21);
k(14,19) = k(2,7);
k(14,20) = k(2,8);
k(14,21) = k(2,18);
k(14,22) = k(2,10);
k(14,23) = k(2,11);
k(14,24) = k(2,15);
k(15,15) = k(3,3);
k(15,16) = k(3,13);
k(15,17) = k(3,20);
k(15,18) = k(3,6);
k(15,19) = k(3,22);
k(15,20) = k(3,17);
k(15,21) = k(3,9);
k(15,22) = k(3,19);
k(15,23) = k(3,14);
k(15,24) = k(3,12);
k(16,16) = k(1,1);
k(16,17) = k(1,8);
k(16,18) = k(1,3);
k(16,19) = k(1,10);
k(16,20) = k(1,5);
k(16,21) = k(1,12);
k(16,22) = k(1,7);
k(16,23) = k(1,2);
k(16,24) = k(1,9);
k(17,17) = k(2,2);
k(17,18) = k(2,24);
k(17,19) = k(2,4);
k(17,20) = k(2,11);
k(17,21) = k(2,15);
k(17,22) = k(1,2);
k(17,23) = k(2,8);
k(17,24) = k(2,18);
k(18,18) = k(3,3);
k(18,19) = k(3,10);
k(18,20) = k(3,14);
k(18,21) = k(3,12);
k(18,22) = k(3,7);
k(18,23) = k(3,17);
k(18,24) = k(3,9);
k(19,19) = k(1,1);
k(19,20) = k(1,2);
k(19,21) = k(1,3);
k(19,22) = k(1,4);
k(19,23) = k(1,5);
k(19,24) = k(1,6);
k(20,20) = k(2,2);
k(20,21) = k(2,3);
k(20,22) = k(2,4);
k(20,23) = k(2,5);
k(20,24) = k(2,6);
k(21,21) = k(3,3);
k(21,22) = k(3,4);
k(21,23) = k(3,5);
k(21,24) = k(3,6);
k(22,22) = k(1,1);
k(22,23) = k(1,8);
k(22,24) = k(1,18);
k(23,23) = k(2,2);
k(23,24) = k(2,3);
k(24,24) = k(3,3);

for j = 1:23
    for i = (j+1):24
        k(i,j) = k(j,i);
    end
end

perm2 = [1,2,3,7,8,9,10,11,12,4,5,6,13,14,15,19,20,21,22,23,24,16,17,18];
k(perm2,perm2) = k;

end